<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="my_robot">
  <!-- Robot constants -->
  <xacro:property name="base_width" value="0.3"/>
  <xacro:property name="base_length" value="0.4"/>
  <xacro:property name="base_height" value="0.1"/>
  <xacro:property name="wheel_radius" value="0.06"/>
  <xacro:property name="wheel_width" value="0.04"/>
  
  <!-- Base link -->
  <link name="base_link">
    <visual>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
      <material name="blue">
        <color rgba="0 0 0.8 1"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="5.0"/>
      <inertia 
        ixx="${1/12 * 5.0 * (base_width*base_width + base_height*base_height)}" 
        ixy="0" ixz="0"
        iyy="${1/12 * 5.0 * (base_length*base_length + base_height*base_height)}" 
        iyz="0"
        izz="${1/12 * 5.0 * (base_length*base_length + base_width*base_width)}"/>
    </inertial>
  </link>
  
  <!-- Wheel macro -->
  <xacro:macro name="wheel" params="prefix x y">
    <link name="${prefix}_wheel">
      <visual>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
        <material name="black">
          <color rgba="0.1 0.1 0.1 1"/>
        </material>
      </visual>
      <collision>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
      </collision>
      <inertial>
        <mass value="0.5"/>
        <inertia 
          ixx="${1/12 * 0.5 * (3*wheel_radius*wheel_radius + wheel_width*wheel_width)}"
          ixy="0" ixz="0"
          iyy="${1/12 * 0.5 * (3*wheel_radius*wheel_radius + wheel_width*wheel_width)}"
          iyz="0"
          izz="${0.5 * wheel_radius*wheel_radius/2}"/>
      </inertial>
    </link>
    
    <joint name="${prefix}_wheel_joint" type="continuous">
      <parent link="base_link"/>
      <child link="${prefix}_wheel"/>
      <origin xyz="${x} ${y} 0" rpy="${pi/2} 0 0"/>
      <axis xyz="0 0 1"/>
      <dynamics damping="0.1" friction="0.1"/>
    </joint>
  </xacro:macro>
  
  <!-- Use the wheel macro -->
  <xacro:wheel prefix="left" x="0" y="${base_width/2 + wheel_width/2}"/>
  <xacro:wheel prefix="right" x="0" y="-${base_width/2 + wheel_width/2}"/>

  <!-- UPDATED: ROS 2 Gazebo Plugins -->
  
  <!-- Joint State Publisher -->
  <gazebo>
    <plugin name="gazebo_ros_joint_state_publisher" filename="libgazebo_ros_joint_state_publisher.so">
      <ros>
        <namespace>/my_robot</namespace>
        <remapping>~/out:=joint_states</remapping>
      </ros>
      <update_rate>50</update_rate>
      <joint_name>left_wheel_joint</joint_name>
      <joint_name>right_wheel_joint</joint_name>
    </plugin>
  </gazebo>

  <!-- Differential Drive Controller (ROS 2 version) -->
  <gazebo>
    <plugin name="gazebo_ros_diff_drive" filename="libgazebo_ros_diff_drive.so">
      <ros>
        <namespace>/my_robot</namespace>
        <remapping>cmd_vel:=cmd_vel</remapping>
        <remapping>odom:=odom</remapping>
      </ros>
      
      <!-- Wheel Information -->
      <left_joint>left_wheel_joint</left_joint>
      <right_joint>right_wheel_joint</right_joint>
      <wheel_separation>${base_width + wheel_width}</wheel_separation>
      <wheel_diameter>${2 * wheel_radius}</wheel_diameter>
      
      <!-- Limits -->
      <max_wheel_torque>20</max_wheel_torque>
      <max_wheel_acceleration>1.0</max_wheel_acceleration>
      
      <!-- Pi-Optimized Settings -->
      <publish_odom>true</publish_odom>
      <publish_odom_tf>true</publish_odom_tf>
      <publish_wheel_tf>true</publish_wheel_tf>
      <odometry_frame>odom</odometry_frame>
      <robot_base_frame>base_link</robot_base_frame>
      
      <!-- Reduced update rate for Pi performance -->
      <update_rate>30.0</update_rate>
    </plugin>
  </gazebo>

  <!-- Optional: IMU Plugin for navigation -->
  <gazebo reference="base_link">
    <sensor name="imu_sensor" type="imu">
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <ros>
          <namespace>/my_robot</namespace>
          <remapping>~/out:=imu</remapping>
        </ros>
        <initial_orientation_as_reference>false</initial_orientation_as_reference>
      </plugin>
      <always_on>true</always_on>
      <update_rate>20</update_rate>
      <visualize>false</visualize>
    </sensor>
  </gazebo>

  <!-- Pi-Optimized Material Properties -->
  <gazebo reference="base_link">
    <material>Gazebo/Blue</material>
    <mu1>0.2</mu1>
    <mu2>0.2</mu2>
    <selfCollide>false</selfCollide>
  </gazebo>

  <gazebo reference="left_wheel">
    <material>Gazebo/Black</material>
    <mu1>1.0</mu1>
    <mu2>1.0</mu2>
    <kp>1000000.0</kp>
    <kd>100.0</kd>
    <minDepth>0.001</minDepth>
    <maxVel>1.0</maxVel>
  </gazebo>

  <gazebo reference="right_wheel">
    <material>Gazebo/Black</material>
    <mu1>1.0</mu1>
    <mu2>1.0</mu2>
    <kp>1000000.0</kp>
    <kd>100.0</kd>
    <minDepth>0.001</minDepth>
    <maxVel>1.0</maxVel>
  </gazebo>

</robot>