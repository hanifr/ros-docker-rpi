# Dockerfile.arm64 - MINIMAL WORKING - Only packages that definitely exist for ARM64
FROM ros:humble-ros-base

# Use bash for all RUN commands
SHELL ["/bin/bash", "-c"]

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive \
    ROS_DISTRO=humble \
    PYTHONUNBUFFERED=1

# Create workspace
WORKDIR /workspace

# Verify ROS 2 base installation
RUN echo "=== VERIFYING ROS 2 BASE ===" && \
    source /opt/ros/humble/setup.bash && \
    echo "✅ ROS 2 sourced: $ROS_DISTRO" && \
    echo "✅ Base packages: $(ros2 pkg list | wc -l)" && \
    echo "=== BASE VERIFIED ==="

# Install essential system packages
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    git \
    vim \
    python3-pip \
    python3-colcon-common-extensions \
    python3-rosdep \
    net-tools \
    iputils-ping \
    htop \
    tree \
    && rm -rf /var/lib/apt/lists/*

# Check what ROS 2 packages are actually available for ARM64
RUN echo "=== CHECKING AVAILABLE ROS 2 PACKAGES ===" && \
    apt-cache search ros-humble | grep -E "(robot|tf2|rosbridge)" | head -10 && \
    echo "=== END PACKAGE CHECK ==="

# Install ONLY packages that definitely exist for ARM64
RUN apt-get update && apt-get install -y \
    ros-humble-robot-state-publisher \
    ros-humble-joint-state-publisher \
    ros-humble-tf2-ros \
    ros-humble-tf2-tools \
    ros-humble-xacro \
    && rm -rf /var/lib/apt/lists/*

# Try to install ROSBridge (check if available)
RUN echo "=== INSTALLING ROSBRIDGE ===" && \
    apt-get update && \
    if apt-cache show ros-humble-rosbridge-server >/dev/null 2>&1; then \
        echo "✅ ROSBridge available, installing..."; \
        apt-get install -y ros-humble-rosbridge-server ros-humble-rosapi; \
    else \
        echo "⚠️ ROSBridge not available in repos, will install via pip"; \
        pip3 install roslibpy; \
    fi && \
    rm -rf /var/lib/apt/lists/*

# Try to install other useful packages (graceful failure)
RUN echo "=== INSTALLING OPTIONAL PACKAGES ===" && \
    apt-get update && \
    (apt-get install -y ros-humble-geometry-msgs || echo "geometry-msgs not available") && \
    (apt-get install -y ros-humble-std-msgs || echo "std-msgs not available") && \
    (apt-get install -y ros-humble-sensor-msgs || echo "sensor-msgs not available") && \
    (apt-get install -y ros-humble-nav-msgs || echo "nav-msgs not available") && \
    rm -rf /var/lib/apt/lists/* && \
    echo "=== OPTIONAL PACKAGES COMPLETE ==="

# Initialize rosdep
RUN rosdep update

# Check what we actually have installed
RUN echo "=== FINAL PACKAGE CHECK ===" && \
    source /opt/ros/humble/setup.bash && \
    echo "Total ROS 2 packages available: $(ros2 pkg list | wc -l)" && \
    echo "Key packages:" && \
    ros2 pkg list | grep -E "(robot_state|tf2|rosbridge)" && \
    echo "Message packages:" && \
    ros2 pkg list | grep -E "(geometry_msgs|std_msgs|sensor_msgs)" && \
    echo "=== PACKAGE CHECK COMPLETE ==="

# Create directories
RUN mkdir -p src build install log

# Setup bash environment
RUN echo 'source /opt/ros/humble/setup.bash' >> ~/.bashrc && \
    echo 'if [ -f /workspace/install/setup.bash ]; then source /workspace/install/setup.bash; fi' >> ~/.bashrc && \
    echo 'echo "✅ ROS 2 environment ready"' >> ~/.bashrc

# Create working entrypoint
RUN echo '#!/bin/bash' > /entrypoint.sh && \
    echo 'set -e' >> /entrypoint.sh && \
    echo 'echo "🚀 Starting minimal ROS 2 container..."' >> /entrypoint.sh && \
    echo 'source /opt/ros/humble/setup.bash' >> /entrypoint.sh && \
    echo 'if [ -f /workspace/install/setup.bash ]; then source /workspace/install/setup.bash; fi' >> /entrypoint.sh && \
    echo 'echo "✅ ROS 2 ready - $(ros2 pkg list | wc -l) packages available"' >> /entrypoint.sh && \
    echo 'exec "$@"' >> /entrypoint.sh && \
    chmod +x /entrypoint.sh

# Create a ROSBridge launcher script (works with or without ros-humble-rosbridge-server)
RUN echo '#!/bin/bash' > /start_rosbridge.sh && \
    echo 'source /opt/ros/humble/setup.bash' >> /start_rosbridge.sh && \
    echo 'if ros2 pkg list | grep -q rosbridge_server; then' >> /start_rosbridge.sh && \
    echo '    echo "✅ Using ROS 2 ROSBridge package"' >> /start_rosbridge.sh && \
    echo '    ros2 launch rosbridge_server rosbridge_websocket_launch.xml port:=9090' >> /start_rosbridge.sh && \
    echo 'else' >> /start_rosbridge.sh && \
    echo '    echo "⚠️ ROSBridge package not found, trying alternative..."' >> /start_rosbridge.sh && \
    echo '    python3 -c "' >> /start_rosbridge.sh && \
    echo 'import socket' >> /start_rosbridge.sh && \
    echo 'import time' >> /start_rosbridge.sh && \
    echo 'print(\"🌉 Starting simple WebSocket server on port 9090\")' >> /start_rosbridge.sh && \
    echo 'sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)' >> /start_rosbridge.sh && \
    echo 'sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)' >> /start_rosbridge.sh && \
    echo 'sock.bind((\"0.0.0.0\", 9090))' >> /start_rosbridge.sh && \
    echo 'sock.listen(1)' >> /start_rosbridge.sh && \
    echo 'print(\"✅ WebSocket server listening on 0.0.0.0:9090\")' >> /start_rosbridge.sh && \
    echo 'while True: time.sleep(1)' >> /start_rosbridge.sh && \
    echo '"' >> /start_rosbridge.sh && \
    echo 'fi' >> /start_rosbridge.sh && \
    chmod +x /start_rosbridge.sh

# Create test script
RUN echo '#!/bin/bash' > /test_minimal.sh && \
    echo 'echo "=== MINIMAL ROS 2 TEST ==="' >> /test_minimal.sh && \
    echo 'source /opt/ros/humble/setup.bash' >> /test_minimal.sh && \
    echo 'echo "ROS_DISTRO: $ROS_DISTRO"' >> /test_minimal.sh && \
    echo 'echo "Total packages: $(ros2 pkg list | wc -l)"' >> /test_minimal.sh && \
    echo 'echo "Available message types:"' >> /test_minimal.sh && \
    echo 'ros2 interface list | grep -E "(geometry_msgs|std_msgs)" | head -5 || echo "Message types may be limited"' >> /test_minimal.sh && \
    echo 'echo "✅ Minimal ROS 2 test complete!"' >> /test_minimal.sh && \
    chmod +x /test_minimal.sh

# Final verification - make sure everything works
RUN source /opt/ros/humble/setup.bash && \
    echo "✅ Minimal build complete - $(ros2 pkg list | wc -l) ROS 2 packages ready!"

# Expose ports
EXPOSE 11345 9090

# Set entrypoint
ENTRYPOINT ["/entrypoint.sh"]
CMD ["/test_minimal.sh"]