# Dockerfile.arm64 - ROS 2 Humble for Pi 4B (Improved)
FROM arm64v8/ros:humble-ros-base-jammy

# Set environment variables for Pi optimization
ENV DEBIAN_FRONTEND=noninteractive \
    ROS_DISTRO=humble \
    PYTHONUNBUFFERED=1 \
    TERM=xterm-256color

# Create workspace early
WORKDIR /workspace

# Install system dependencies in one layer for better caching
RUN apt-get update && apt-get install -y \
    # Gazebo packages
    gazebo \
    ros-humble-gazebo-ros-pkgs \
    ros-humble-gazebo-ros2-control \
    ros-humble-rosbridge-server \
    ros-humble-web-video-server \
    # Build tools
    python3-colcon-common-extensions \
    python3-colcon-mixin \
    python3-rosdep \
    # Development tools
    git \
    curl \
    wget \
    vim \
    htop \
    tree \
    # Debugging tools
    gdb \
    valgrind \
    # Network tools
    net-tools \
    iputils-ping \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Initialize rosdep
RUN rosdep init && rosdep update

# Setup colcon mixins for faster builds
RUN colcon mixin add default \
    https://raw.githubusercontent.com/colcon/colcon-mixin-repository/master/index.yaml && \
    colcon mixin update default

# Create directories
RUN mkdir -p src build install log

# Copy workspace source (if exists)
COPY ros2_ws/src ./src/

# Install dependencies using rosdep (if source packages exist)
RUN if [ "$(ls -A src/ 2>/dev/null)" ]; then \
        echo "Installing ROS 2 package dependencies..." && \
        /bin/bash -c "source /opt/ros/humble/setup.bash && \
                      rosdep install --from-paths src --ignore-src -r -y || true"; \
    fi

# Build workspace (conditional - only if src directory has content)
RUN if [ "$(ls -A src/ 2>/dev/null)" ]; then \
        echo "Building ROS 2 workspace..." && \
        /bin/bash -c "source /opt/ros/humble/setup.bash && \
                      colcon build --symlink-install \
                                   --cmake-args -DCMAKE_BUILD_TYPE=Release \
                                   --parallel-workers 2 \
                                   --event-handlers console_direct+"; \
    else \
        echo "No source packages found, skipping build"; \
    fi

# Setup bash environment
RUN echo "# ROS 2 Environment Setup" >> ~/.bashrc && \
    echo "source /opt/ros/humble/setup.bash" >> ~/.bashrc && \
    echo "if [ -f /workspace/install/setup.bash ]; then" >> ~/.bashrc && \
    echo "    source /workspace/install/setup.bash" >> ~/.bashrc && \
    echo "    echo 'âœ“ ROS 2 workspace sourced'" >> ~/.bashrc && \
    echo "fi" >> ~/.bashrc && \
    echo "" >> ~/.bashrc && \
    echo "# Aliases for convenience" >> ~/.bashrc && \
    echo "alias ll='ls -la'" >> ~/.bashrc && \
    echo "alias cb='colcon build --symlink-install'" >> ~/.bashrc && \
    echo "alias ct='colcon test'" >> ~/.bashrc && \
    echo "alias source_ros='source /opt/ros/humble/setup.bash'" >> ~/.bashrc && \
    echo "alias source_ws='source install/setup.bash'" >> ~/.bashrc

# Create entrypoint script
RUN echo '#!/bin/bash' > /entrypoint.sh && \
    echo 'set -e' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo '# Source ROS 2' >> /entrypoint.sh && \
    echo 'source /opt/ros/humble/setup.bash' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo '# Source workspace if available' >> /entrypoint.sh && \
    echo 'if [ -f /workspace/install/setup.bash ]; then' >> /entrypoint.sh && \
    echo '    source /workspace/install/setup.bash' >> /entrypoint.sh && \
    echo 'fi' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo '# Execute command' >> /entrypoint.sh && \
    echo 'exec "$@"' >> /entrypoint.sh && \
    chmod +x /entrypoint.sh

# Expose ports
EXPOSE 11345 9090 8080

# Set entrypoint
ENTRYPOINT ["/entrypoint.sh"]

# Default command
CMD ["bash"]